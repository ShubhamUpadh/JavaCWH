import java.util.Arrays;

public class hotelBookings {
    public static void main(String[] args) {
        int[] arrive = { 382, 209, 132, 201, 205, 501, 737, 924, 365, 317, 420, 579, 515, 816, 186, 417, 393, 382, 783, 71, 553, 893, 674, 125, 978, 193, 352, 250, 819, 817, 871, 593, 741, 269, 697, 332, 617, 401, 244, 581, 567, 702, 713, 70, 564, 537, 98, 276, 104, 647, 458, 922, 686, 449, 840, 36, 76, 955, 449, 983, 597, 334, 935, 146, 945, 452, 915, 194, 251, 902, 78, 95, 394, 363, 508, 316, 789, 306, 68, 872, 148, 375, 971, 169, 955, 971, 896, 785, 623, 855, 263, 653, 604, 815, 531, 292, 908, 700, 635, 25, 789, 365, 919, 362, 583, 342, 178, 957, 928, 269, 688, 846, 864, 394, 310, 853, 551, 698, 58, 375, 581, 436, 731, 944, 139, 149, 464, 268, 490, 452, 336, 648, 535, 137, 374, 972, 418, 409, 578, 700, 439, 286, 828, 512, 734, 482, 791, 556, 490, 310, 176, 463, 659, 418, 975, 558, 424, 392, 524, 943, 903, 551, 528, 376, 818, 457, 386, 125, 138, 961, 446, 217, 912, 836, 48, 767, 800, 273, 471, 302, 21, 832, 136, 265, 725, 603, 702, 116, 17, 672, 888, 719, 116, 151, 160, 923, 404, 360, 636, 528, 339, 933, 812, 55, 472, 920, 997, 995, 62, 166, 546, 468, 26, 538, 268, 458, 209, 785, 617, 67, 210, 93, 530, 438, 262, 620, 31, 304, 898, 588, 954, 307, 386, 702, 404, 541, 183, 973, 822, 974, 888, 226, 764, 685, 434, 862, 752, 93, 509, 652, 822, 593, 443, 644, 624, 291, 48, 450, 188, 746, 152, 493, 722, 911, 815, 994, 53, 690, 461, 766, 577, 781, 422, 98, 827, 751, 622, 300, 24, 494, 400, 694, 229, 518, 707, 105, 953, 719, 153, 161, 338, 591, 669, 943, 281, 20, 739, 790, 102, 109};
        int[] depart = { 1185, 258, 1118, 1060, 327, 1058, 1449, 1798, 570, 793, 1084, 825, 627, 859, 709, 844, 1232, 1039, 1756, 934, 1036, 1313, 1171, 543, 1491, 821, 1237, 746, 999, 1333, 971, 1407, 1057, 1130, 1102, 377, 679, 665, 1121, 1342, 850, 907, 1437, 487, 1252, 716, 131, 583, 1037, 1172, 1312, 1632, 904, 1208, 1596, 718, 232, 1454, 706, 1184, 1523, 652, 1705, 767, 1925, 552, 1871, 832, 1082, 1639, 714, 336, 1078, 612, 1153, 643, 1723, 955, 354, 1843, 940, 527, 1243, 694, 1530, 1514, 1190, 814, 1036, 1655, 889, 1282, 1004, 1111, 921, 1246, 1367, 858, 1036, 698, 1229, 997, 1628, 1043, 800, 859, 433, 1573, 1735, 277, 964, 1524, 1649, 929, 661, 1792, 1050, 1119, 295, 998, 1459, 879, 1623, 982, 964, 791, 785, 408, 981, 1384, 481, 1568, 1467, 519, 415, 1052, 1342, 622, 1020, 1401, 1397, 1161, 968, 1370, 1413, 1241, 1480, 955, 782, 705, 940, 796, 1367, 631, 1818, 1095, 866, 582, 1411, 1692, 1440, 1531, 1418, 414, 848, 805, 845, 345, 880, 1953, 1253, 1141, 1298, 925, 855, 1030, 1097, 419, 483, 620, 286, 1812, 900, 1158, 1005, 1526, 1509, 361, 188, 1246, 927, 1475, 560, 831, 458, 1657, 1205, 1343, 964, 1351, 491, 1048, 1131, 771, 567, 1786, 1659, 1122, 235, 581, 1375, 702, 428, 890, 759, 513, 1055, 1358, 926, 511, 475, 475, 536, 1130, 361, 1002, 671, 1221, 1206, 1569, 1161, 1018, 1227, 1311, 1378, 1291, 931, 1929, 1018, 1293, 1099, 1066, 852, 1653, 444, 1375, 974, 841, 700, 1155, 1552, 1327, 1406, 957, 1580, 1094, 132, 1018, 646, 1602, 418, 931, 1226, 1870, 1171, 1412, 505, 785, 788, 1562, 1240, 1282, 758, 498, 1662, 1527, 998, 742, 938, 725, 688, 1247, 1192, 713, 859, 439, 1600, 927, 488, 169, 553, 927, 1369, 948, 417, 70, 1499, 1353, 873, 487 };
        int rooms = 142;
        System.out.println(solution(arrive,depart,rooms));
    }

    static int maxDepart(int[] arr){
        int max = arr[0];
        for (int j : arr) max = Math.max(max,j);
        return max;
    }
    static boolean solution(int[] arrive, int[] depart, int rooms){
        int[] populationArray = new int[maxDepart(depart)+1];
        Arrays.fill(populationArray, -2);
        for (int j : arrive) populationArray[j] = 1;
        for (int j : depart) {
            if (populationArray[j] == 1) {
                populationArray[j] = 0;
            } else if (populationArray[j] == -2) {
                populationArray[j] = -1;
            }
        }
        int roomsNeeded = 0;
        int i = 0;
        while (i < populationArray.length){
            if (populationArray[i] == -2){
                i++;
                continue;
            }
            if (populationArray[i] == 1){
                roomsNeeded++;
            }
            else if (populationArray[i] == -1) {
                roomsNeeded--;
            }
            else{
                if (roomsNeeded == rooms){  //Arrival and departure @ same day
                    return false;
                }
            }
            if (roomsNeeded > rooms){
                return false;
            }
            i++;
        }
        return true;

    }
}
